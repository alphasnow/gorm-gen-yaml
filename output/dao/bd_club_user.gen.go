// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/we7coreteam/gorm-gen-yaml/output/entity"
)

func newClubUser(db *gorm.DB, opts ...gen.DOOption) clubUser {
	_clubUser := clubUser{}

	_clubUser.clubUserDo.UseDB(db, opts...)
	_clubUser.clubUserDo.UseModel(&entity.ClubUser{})

	tableName := _clubUser.clubUserDo.TableName()
	_clubUser.ALL = field.NewAsterisk(tableName)
	_clubUser.ID = field.NewInt32(tableName, "id")
	_clubUser.GroupID = field.NewInt32(tableName, "group_id")
	_clubUser.ClubID = field.NewInt32(tableName, "club_id")
	_clubUser.WithUserID = field.NewInt32(tableName, "with_user_id")
	_clubUser.Username = field.NewString(tableName, "username")
	_clubUser.Password = field.NewString(tableName, "password")
	_clubUser.Salt = field.NewString(tableName, "salt")
	_clubUser.Email = field.NewString(tableName, "email")
	_clubUser.Mobile = field.NewString(tableName, "mobile")
	_clubUser.VestNickname = field.NewString(tableName, "vest_nickname")
	_clubUser.Energy = field.NewFloat64(tableName, "energy")
	_clubUser.Price = field.NewFloat64(tableName, "price")
	_clubUser.LoginFailure = field.NewInt32(tableName, "login_failure")
	_clubUser.LoginTime = field.NewInt32(tableName, "login_time")
	_clubUser.LoginIP = field.NewString(tableName, "login_ip")
	_clubUser.Token = field.NewString(tableName, "token")
	_clubUser.ClubFee = field.NewString(tableName, "club_fee")
	_clubUser.Status = field.NewString(tableName, "status")
	_clubUser.CreateTime = field.NewInt32(tableName, "create_time")
	_clubUser.UpdateTime = field.NewInt32(tableName, "update_time")
	_clubUser.DeleteTime = field.NewInt32(tableName, "delete_time")

	_clubUser.fillFieldMap()

	return _clubUser
}

type clubUser struct {
	clubUserDo

	ALL          field.Asterisk
	ID           field.Int32
	GroupID      field.Int32   // 组别ID
	ClubID       field.Int32   // 俱乐部ID
	WithUserID   field.Int32   // 关联的小程序用户ID
	Username     field.String  // 用户名
	Password     field.String  // 密码
	Salt         field.String  // 密码盐
	Email        field.String  // 邮箱
	Mobile       field.String  // 手机号
	VestNickname field.String  // 马甲昵称
	Energy       field.Float64 // 能量
	Price        field.Float64 // 佣金价格
	LoginFailure field.Int32   // 失败次数
	LoginTime    field.Int32   // 登录时间
	LoginIP      field.String  // 登录IP
	Token        field.String  // Session标识
	ClubFee      field.String  // 已交团费的月份
	Status       field.String  // 状态:disabled=冻结 normal=正常
	CreateTime   field.Int32   // 添加时间
	UpdateTime   field.Int32   // 修改时间
	DeleteTime   field.Int32   // 删除时间

	fieldMap map[string]field.Expr
}

func (c clubUser) Table(newTableName string) *clubUser {
	c.clubUserDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c clubUser) As(alias string) *clubUser {
	c.clubUserDo.DO = *(c.clubUserDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *clubUser) updateTableName(table string) *clubUser {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.GroupID = field.NewInt32(table, "group_id")
	c.ClubID = field.NewInt32(table, "club_id")
	c.WithUserID = field.NewInt32(table, "with_user_id")
	c.Username = field.NewString(table, "username")
	c.Password = field.NewString(table, "password")
	c.Salt = field.NewString(table, "salt")
	c.Email = field.NewString(table, "email")
	c.Mobile = field.NewString(table, "mobile")
	c.VestNickname = field.NewString(table, "vest_nickname")
	c.Energy = field.NewFloat64(table, "energy")
	c.Price = field.NewFloat64(table, "price")
	c.LoginFailure = field.NewInt32(table, "login_failure")
	c.LoginTime = field.NewInt32(table, "login_time")
	c.LoginIP = field.NewString(table, "login_ip")
	c.Token = field.NewString(table, "token")
	c.ClubFee = field.NewString(table, "club_fee")
	c.Status = field.NewString(table, "status")
	c.CreateTime = field.NewInt32(table, "create_time")
	c.UpdateTime = field.NewInt32(table, "update_time")
	c.DeleteTime = field.NewInt32(table, "delete_time")

	c.fillFieldMap()

	return c
}

func (c *clubUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *clubUser) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 21)
	c.fieldMap["id"] = c.ID
	c.fieldMap["group_id"] = c.GroupID
	c.fieldMap["club_id"] = c.ClubID
	c.fieldMap["with_user_id"] = c.WithUserID
	c.fieldMap["username"] = c.Username
	c.fieldMap["password"] = c.Password
	c.fieldMap["salt"] = c.Salt
	c.fieldMap["email"] = c.Email
	c.fieldMap["mobile"] = c.Mobile
	c.fieldMap["vest_nickname"] = c.VestNickname
	c.fieldMap["energy"] = c.Energy
	c.fieldMap["price"] = c.Price
	c.fieldMap["login_failure"] = c.LoginFailure
	c.fieldMap["login_time"] = c.LoginTime
	c.fieldMap["login_ip"] = c.LoginIP
	c.fieldMap["token"] = c.Token
	c.fieldMap["club_fee"] = c.ClubFee
	c.fieldMap["status"] = c.Status
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_time"] = c.UpdateTime
	c.fieldMap["delete_time"] = c.DeleteTime
}

func (c clubUser) clone(db *gorm.DB) clubUser {
	c.clubUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c clubUser) replaceDB(db *gorm.DB) clubUser {
	c.clubUserDo.ReplaceDB(db)
	return c
}

type clubUserDo struct{ gen.DO }

type IClubUserDo interface {
	gen.SubQuery
	Debug() IClubUserDo
	WithContext(ctx context.Context) IClubUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IClubUserDo
	WriteDB() IClubUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IClubUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IClubUserDo
	Not(conds ...gen.Condition) IClubUserDo
	Or(conds ...gen.Condition) IClubUserDo
	Select(conds ...field.Expr) IClubUserDo
	Where(conds ...gen.Condition) IClubUserDo
	Order(conds ...field.Expr) IClubUserDo
	Distinct(cols ...field.Expr) IClubUserDo
	Omit(cols ...field.Expr) IClubUserDo
	Join(table schema.Tabler, on ...field.Expr) IClubUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IClubUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IClubUserDo
	Group(cols ...field.Expr) IClubUserDo
	Having(conds ...gen.Condition) IClubUserDo
	Limit(limit int) IClubUserDo
	Offset(offset int) IClubUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IClubUserDo
	Unscoped() IClubUserDo
	Create(values ...*entity.ClubUser) error
	CreateInBatches(values []*entity.ClubUser, batchSize int) error
	Save(values ...*entity.ClubUser) error
	First() (*entity.ClubUser, error)
	Take() (*entity.ClubUser, error)
	Last() (*entity.ClubUser, error)
	Find() ([]*entity.ClubUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ClubUser, err error)
	FindInBatches(result *[]*entity.ClubUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.ClubUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IClubUserDo
	Assign(attrs ...field.AssignExpr) IClubUserDo
	Joins(fields ...field.RelationField) IClubUserDo
	Preload(fields ...field.RelationField) IClubUserDo
	FirstOrInit() (*entity.ClubUser, error)
	FirstOrCreate() (*entity.ClubUser, error)
	FindByPage(offset int, limit int) (result []*entity.ClubUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IClubUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c clubUserDo) Debug() IClubUserDo {
	return c.withDO(c.DO.Debug())
}

func (c clubUserDo) WithContext(ctx context.Context) IClubUserDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c clubUserDo) ReadDB() IClubUserDo {
	return c.Clauses(dbresolver.Read)
}

func (c clubUserDo) WriteDB() IClubUserDo {
	return c.Clauses(dbresolver.Write)
}

func (c clubUserDo) Session(config *gorm.Session) IClubUserDo {
	return c.withDO(c.DO.Session(config))
}

func (c clubUserDo) Clauses(conds ...clause.Expression) IClubUserDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c clubUserDo) Returning(value interface{}, columns ...string) IClubUserDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c clubUserDo) Not(conds ...gen.Condition) IClubUserDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c clubUserDo) Or(conds ...gen.Condition) IClubUserDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c clubUserDo) Select(conds ...field.Expr) IClubUserDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c clubUserDo) Where(conds ...gen.Condition) IClubUserDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c clubUserDo) Order(conds ...field.Expr) IClubUserDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c clubUserDo) Distinct(cols ...field.Expr) IClubUserDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c clubUserDo) Omit(cols ...field.Expr) IClubUserDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c clubUserDo) Join(table schema.Tabler, on ...field.Expr) IClubUserDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c clubUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IClubUserDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c clubUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IClubUserDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c clubUserDo) Group(cols ...field.Expr) IClubUserDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c clubUserDo) Having(conds ...gen.Condition) IClubUserDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c clubUserDo) Limit(limit int) IClubUserDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c clubUserDo) Offset(offset int) IClubUserDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c clubUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IClubUserDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c clubUserDo) Unscoped() IClubUserDo {
	return c.withDO(c.DO.Unscoped())
}

func (c clubUserDo) Create(values ...*entity.ClubUser) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c clubUserDo) CreateInBatches(values []*entity.ClubUser, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c clubUserDo) Save(values ...*entity.ClubUser) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c clubUserDo) First() (*entity.ClubUser, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ClubUser), nil
	}
}

func (c clubUserDo) Take() (*entity.ClubUser, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ClubUser), nil
	}
}

func (c clubUserDo) Last() (*entity.ClubUser, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ClubUser), nil
	}
}

func (c clubUserDo) Find() ([]*entity.ClubUser, error) {
	result, err := c.DO.Find()
	return result.([]*entity.ClubUser), err
}

func (c clubUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ClubUser, err error) {
	buf := make([]*entity.ClubUser, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c clubUserDo) FindInBatches(result *[]*entity.ClubUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c clubUserDo) Attrs(attrs ...field.AssignExpr) IClubUserDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c clubUserDo) Assign(attrs ...field.AssignExpr) IClubUserDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c clubUserDo) Joins(fields ...field.RelationField) IClubUserDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c clubUserDo) Preload(fields ...field.RelationField) IClubUserDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c clubUserDo) FirstOrInit() (*entity.ClubUser, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ClubUser), nil
	}
}

func (c clubUserDo) FirstOrCreate() (*entity.ClubUser, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ClubUser), nil
	}
}

func (c clubUserDo) FindByPage(offset int, limit int) (result []*entity.ClubUser, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c clubUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c clubUserDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c clubUserDo) Delete(models ...*entity.ClubUser) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *clubUserDo) withDO(do gen.Dao) *clubUserDo {
	c.DO = *do.(*gen.DO)
	return c
}
