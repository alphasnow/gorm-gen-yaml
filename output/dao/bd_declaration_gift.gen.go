// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/we7coreteam/gorm-gen-yaml/output/entity"
)

func newDeclarationGift(db *gorm.DB, opts ...gen.DOOption) declarationGift {
	_declarationGift := declarationGift{}

	_declarationGift.declarationGiftDo.UseDB(db, opts...)
	_declarationGift.declarationGiftDo.UseModel(&entity.DeclarationGift{})

	tableName := _declarationGift.declarationGiftDo.TableName()
	_declarationGift.ALL = field.NewAsterisk(tableName)
	_declarationGift.ID = field.NewInt32(tableName, "id")
	_declarationGift.ClubID = field.NewInt32(tableName, "club_id")
	_declarationGift.DeclarationTypeID = field.NewInt32(tableName, "declaration_type_id")
	_declarationGift.Name = field.NewString(tableName, "name")
	_declarationGift.Icon = field.NewString(tableName, "icon")
	_declarationGift.Price = field.NewFloat64(tableName, "price")
	_declarationGift.Commission = field.NewFloat64(tableName, "commission")
	_declarationGift.Rebate = field.NewFloat64(tableName, "rebate")
	_declarationGift.Weigh = field.NewInt32(tableName, "weigh")
	_declarationGift.Description = field.NewString(tableName, "description")
	_declarationGift.Status = field.NewString(tableName, "status")
	_declarationGift.ConvertType = field.NewString(tableName, "convert_type")
	_declarationGift.ConvertPrice = field.NewFloat64(tableName, "convert_price")
	_declarationGift.ConvertRemoveTailType = field.NewString(tableName, "convert_remove_tail_type")
	_declarationGift.CreateTime = field.NewInt32(tableName, "create_time")
	_declarationGift.UpdateTime = field.NewInt32(tableName, "update_time")
	_declarationGift.DeleteTime = field.NewInt32(tableName, "delete_time")

	_declarationGift.fillFieldMap()

	return _declarationGift
}

type declarationGift struct {
	declarationGiftDo

	ALL                   field.Asterisk
	ID                    field.Int32
	ClubID                field.Int32   // 俱乐部ID
	DeclarationTypeID     field.Int32   // 报单类型ID
	Name                  field.String  // 名称
	Icon                  field.String  // 图标
	Price                 field.Float64 // 价格
	Commission            field.Float64 // 抽成
	Rebate                field.Float64 // 返利
	Weigh                 field.Int32   // 权重
	Description           field.String  // 描述
	Status                field.String  // 状态
	ConvertType           field.String  // 折算方式:1=不折算,2=固定单价,3=陪玩单价,4=折算成0
	ConvertPrice          field.Float64 // 固定折算价格
	ConvertRemoveTailType field.String  // 去尾方式:1=忽略小数点,2=四舍五入
	CreateTime            field.Int32   // 添加时间
	UpdateTime            field.Int32   // 修改时间
	DeleteTime            field.Int32   // 删除时间

	fieldMap map[string]field.Expr
}

func (d declarationGift) Table(newTableName string) *declarationGift {
	d.declarationGiftDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d declarationGift) As(alias string) *declarationGift {
	d.declarationGiftDo.DO = *(d.declarationGiftDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *declarationGift) updateTableName(table string) *declarationGift {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.ClubID = field.NewInt32(table, "club_id")
	d.DeclarationTypeID = field.NewInt32(table, "declaration_type_id")
	d.Name = field.NewString(table, "name")
	d.Icon = field.NewString(table, "icon")
	d.Price = field.NewFloat64(table, "price")
	d.Commission = field.NewFloat64(table, "commission")
	d.Rebate = field.NewFloat64(table, "rebate")
	d.Weigh = field.NewInt32(table, "weigh")
	d.Description = field.NewString(table, "description")
	d.Status = field.NewString(table, "status")
	d.ConvertType = field.NewString(table, "convert_type")
	d.ConvertPrice = field.NewFloat64(table, "convert_price")
	d.ConvertRemoveTailType = field.NewString(table, "convert_remove_tail_type")
	d.CreateTime = field.NewInt32(table, "create_time")
	d.UpdateTime = field.NewInt32(table, "update_time")
	d.DeleteTime = field.NewInt32(table, "delete_time")

	d.fillFieldMap()

	return d
}

func (d *declarationGift) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *declarationGift) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 17)
	d.fieldMap["id"] = d.ID
	d.fieldMap["club_id"] = d.ClubID
	d.fieldMap["declaration_type_id"] = d.DeclarationTypeID
	d.fieldMap["name"] = d.Name
	d.fieldMap["icon"] = d.Icon
	d.fieldMap["price"] = d.Price
	d.fieldMap["commission"] = d.Commission
	d.fieldMap["rebate"] = d.Rebate
	d.fieldMap["weigh"] = d.Weigh
	d.fieldMap["description"] = d.Description
	d.fieldMap["status"] = d.Status
	d.fieldMap["convert_type"] = d.ConvertType
	d.fieldMap["convert_price"] = d.ConvertPrice
	d.fieldMap["convert_remove_tail_type"] = d.ConvertRemoveTailType
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["update_time"] = d.UpdateTime
	d.fieldMap["delete_time"] = d.DeleteTime
}

func (d declarationGift) clone(db *gorm.DB) declarationGift {
	d.declarationGiftDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d declarationGift) replaceDB(db *gorm.DB) declarationGift {
	d.declarationGiftDo.ReplaceDB(db)
	return d
}

type declarationGiftDo struct{ gen.DO }

type IDeclarationGiftDo interface {
	gen.SubQuery
	Debug() IDeclarationGiftDo
	WithContext(ctx context.Context) IDeclarationGiftDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeclarationGiftDo
	WriteDB() IDeclarationGiftDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeclarationGiftDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeclarationGiftDo
	Not(conds ...gen.Condition) IDeclarationGiftDo
	Or(conds ...gen.Condition) IDeclarationGiftDo
	Select(conds ...field.Expr) IDeclarationGiftDo
	Where(conds ...gen.Condition) IDeclarationGiftDo
	Order(conds ...field.Expr) IDeclarationGiftDo
	Distinct(cols ...field.Expr) IDeclarationGiftDo
	Omit(cols ...field.Expr) IDeclarationGiftDo
	Join(table schema.Tabler, on ...field.Expr) IDeclarationGiftDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeclarationGiftDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeclarationGiftDo
	Group(cols ...field.Expr) IDeclarationGiftDo
	Having(conds ...gen.Condition) IDeclarationGiftDo
	Limit(limit int) IDeclarationGiftDo
	Offset(offset int) IDeclarationGiftDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeclarationGiftDo
	Unscoped() IDeclarationGiftDo
	Create(values ...*entity.DeclarationGift) error
	CreateInBatches(values []*entity.DeclarationGift, batchSize int) error
	Save(values ...*entity.DeclarationGift) error
	First() (*entity.DeclarationGift, error)
	Take() (*entity.DeclarationGift, error)
	Last() (*entity.DeclarationGift, error)
	Find() ([]*entity.DeclarationGift, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.DeclarationGift, err error)
	FindInBatches(result *[]*entity.DeclarationGift, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.DeclarationGift) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeclarationGiftDo
	Assign(attrs ...field.AssignExpr) IDeclarationGiftDo
	Joins(fields ...field.RelationField) IDeclarationGiftDo
	Preload(fields ...field.RelationField) IDeclarationGiftDo
	FirstOrInit() (*entity.DeclarationGift, error)
	FirstOrCreate() (*entity.DeclarationGift, error)
	FindByPage(offset int, limit int) (result []*entity.DeclarationGift, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeclarationGiftDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d declarationGiftDo) Debug() IDeclarationGiftDo {
	return d.withDO(d.DO.Debug())
}

func (d declarationGiftDo) WithContext(ctx context.Context) IDeclarationGiftDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d declarationGiftDo) ReadDB() IDeclarationGiftDo {
	return d.Clauses(dbresolver.Read)
}

func (d declarationGiftDo) WriteDB() IDeclarationGiftDo {
	return d.Clauses(dbresolver.Write)
}

func (d declarationGiftDo) Session(config *gorm.Session) IDeclarationGiftDo {
	return d.withDO(d.DO.Session(config))
}

func (d declarationGiftDo) Clauses(conds ...clause.Expression) IDeclarationGiftDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d declarationGiftDo) Returning(value interface{}, columns ...string) IDeclarationGiftDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d declarationGiftDo) Not(conds ...gen.Condition) IDeclarationGiftDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d declarationGiftDo) Or(conds ...gen.Condition) IDeclarationGiftDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d declarationGiftDo) Select(conds ...field.Expr) IDeclarationGiftDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d declarationGiftDo) Where(conds ...gen.Condition) IDeclarationGiftDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d declarationGiftDo) Order(conds ...field.Expr) IDeclarationGiftDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d declarationGiftDo) Distinct(cols ...field.Expr) IDeclarationGiftDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d declarationGiftDo) Omit(cols ...field.Expr) IDeclarationGiftDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d declarationGiftDo) Join(table schema.Tabler, on ...field.Expr) IDeclarationGiftDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d declarationGiftDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeclarationGiftDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d declarationGiftDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeclarationGiftDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d declarationGiftDo) Group(cols ...field.Expr) IDeclarationGiftDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d declarationGiftDo) Having(conds ...gen.Condition) IDeclarationGiftDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d declarationGiftDo) Limit(limit int) IDeclarationGiftDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d declarationGiftDo) Offset(offset int) IDeclarationGiftDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d declarationGiftDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeclarationGiftDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d declarationGiftDo) Unscoped() IDeclarationGiftDo {
	return d.withDO(d.DO.Unscoped())
}

func (d declarationGiftDo) Create(values ...*entity.DeclarationGift) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d declarationGiftDo) CreateInBatches(values []*entity.DeclarationGift, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d declarationGiftDo) Save(values ...*entity.DeclarationGift) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d declarationGiftDo) First() (*entity.DeclarationGift, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.DeclarationGift), nil
	}
}

func (d declarationGiftDo) Take() (*entity.DeclarationGift, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.DeclarationGift), nil
	}
}

func (d declarationGiftDo) Last() (*entity.DeclarationGift, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.DeclarationGift), nil
	}
}

func (d declarationGiftDo) Find() ([]*entity.DeclarationGift, error) {
	result, err := d.DO.Find()
	return result.([]*entity.DeclarationGift), err
}

func (d declarationGiftDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.DeclarationGift, err error) {
	buf := make([]*entity.DeclarationGift, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d declarationGiftDo) FindInBatches(result *[]*entity.DeclarationGift, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d declarationGiftDo) Attrs(attrs ...field.AssignExpr) IDeclarationGiftDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d declarationGiftDo) Assign(attrs ...field.AssignExpr) IDeclarationGiftDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d declarationGiftDo) Joins(fields ...field.RelationField) IDeclarationGiftDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d declarationGiftDo) Preload(fields ...field.RelationField) IDeclarationGiftDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d declarationGiftDo) FirstOrInit() (*entity.DeclarationGift, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.DeclarationGift), nil
	}
}

func (d declarationGiftDo) FirstOrCreate() (*entity.DeclarationGift, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.DeclarationGift), nil
	}
}

func (d declarationGiftDo) FindByPage(offset int, limit int) (result []*entity.DeclarationGift, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d declarationGiftDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d declarationGiftDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d declarationGiftDo) Delete(models ...*entity.DeclarationGift) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *declarationGiftDo) withDO(do gen.Dao) *declarationGiftDo {
	d.DO = *do.(*gen.DO)
	return d
}
