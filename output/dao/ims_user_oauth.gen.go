// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/we7coreteam/gorm-gen-yaml/output/entity"
)

func newUserOauth(db *gorm.DB, opts ...gen.DOOption) userOauth {
	_userOauth := userOauth{}

	_userOauth.userOauthDo.UseDB(db, opts...)
	_userOauth.userOauthDo.UseModel(&entity.UserOauth{})

	tableName := _userOauth.userOauthDo.TableName()
	_userOauth.ALL = field.NewAsterisk(tableName)
	_userOauth.ID = field.NewInt32(tableName, "id")
	_userOauth.UserID = field.NewInt32(tableName, "user_id")

	_userOauth.fillFieldMap()

	return _userOauth
}

type userOauth struct {
	userOauthDo

	ALL    field.Asterisk
	ID     field.Int32
	UserID field.Int32

	fieldMap map[string]field.Expr
}

func (u userOauth) Table(newTableName string) *userOauth {
	u.userOauthDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userOauth) As(alias string) *userOauth {
	u.userOauthDo.DO = *(u.userOauthDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userOauth) updateTableName(table string) *userOauth {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.UserID = field.NewInt32(table, "user_id")

	u.fillFieldMap()

	return u
}

func (u *userOauth) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userOauth) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 2)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
}

func (u userOauth) clone(db *gorm.DB) userOauth {
	u.userOauthDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userOauth) replaceDB(db *gorm.DB) userOauth {
	u.userOauthDo.ReplaceDB(db)
	return u
}

type userOauthDo struct{ gen.DO }

type IUserOauthDo interface {
	gen.SubQuery
	Debug() IUserOauthDo
	WithContext(ctx context.Context) IUserOauthDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserOauthDo
	WriteDB() IUserOauthDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserOauthDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserOauthDo
	Not(conds ...gen.Condition) IUserOauthDo
	Or(conds ...gen.Condition) IUserOauthDo
	Select(conds ...field.Expr) IUserOauthDo
	Where(conds ...gen.Condition) IUserOauthDo
	Order(conds ...field.Expr) IUserOauthDo
	Distinct(cols ...field.Expr) IUserOauthDo
	Omit(cols ...field.Expr) IUserOauthDo
	Join(table schema.Tabler, on ...field.Expr) IUserOauthDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserOauthDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserOauthDo
	Group(cols ...field.Expr) IUserOauthDo
	Having(conds ...gen.Condition) IUserOauthDo
	Limit(limit int) IUserOauthDo
	Offset(offset int) IUserOauthDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserOauthDo
	Unscoped() IUserOauthDo
	Create(values ...*entity.UserOauth) error
	CreateInBatches(values []*entity.UserOauth, batchSize int) error
	Save(values ...*entity.UserOauth) error
	First() (*entity.UserOauth, error)
	Take() (*entity.UserOauth, error)
	Last() (*entity.UserOauth, error)
	Find() ([]*entity.UserOauth, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserOauth, err error)
	FindInBatches(result *[]*entity.UserOauth, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.UserOauth) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserOauthDo
	Assign(attrs ...field.AssignExpr) IUserOauthDo
	Joins(fields ...field.RelationField) IUserOauthDo
	Preload(fields ...field.RelationField) IUserOauthDo
	FirstOrInit() (*entity.UserOauth, error)
	FirstOrCreate() (*entity.UserOauth, error)
	FindByPage(offset int, limit int) (result []*entity.UserOauth, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserOauthDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userOauthDo) Debug() IUserOauthDo {
	return u.withDO(u.DO.Debug())
}

func (u userOauthDo) WithContext(ctx context.Context) IUserOauthDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userOauthDo) ReadDB() IUserOauthDo {
	return u.Clauses(dbresolver.Read)
}

func (u userOauthDo) WriteDB() IUserOauthDo {
	return u.Clauses(dbresolver.Write)
}

func (u userOauthDo) Session(config *gorm.Session) IUserOauthDo {
	return u.withDO(u.DO.Session(config))
}

func (u userOauthDo) Clauses(conds ...clause.Expression) IUserOauthDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userOauthDo) Returning(value interface{}, columns ...string) IUserOauthDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userOauthDo) Not(conds ...gen.Condition) IUserOauthDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userOauthDo) Or(conds ...gen.Condition) IUserOauthDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userOauthDo) Select(conds ...field.Expr) IUserOauthDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userOauthDo) Where(conds ...gen.Condition) IUserOauthDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userOauthDo) Order(conds ...field.Expr) IUserOauthDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userOauthDo) Distinct(cols ...field.Expr) IUserOauthDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userOauthDo) Omit(cols ...field.Expr) IUserOauthDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userOauthDo) Join(table schema.Tabler, on ...field.Expr) IUserOauthDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userOauthDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserOauthDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userOauthDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserOauthDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userOauthDo) Group(cols ...field.Expr) IUserOauthDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userOauthDo) Having(conds ...gen.Condition) IUserOauthDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userOauthDo) Limit(limit int) IUserOauthDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userOauthDo) Offset(offset int) IUserOauthDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userOauthDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserOauthDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userOauthDo) Unscoped() IUserOauthDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userOauthDo) Create(values ...*entity.UserOauth) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userOauthDo) CreateInBatches(values []*entity.UserOauth, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userOauthDo) Save(values ...*entity.UserOauth) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userOauthDo) First() (*entity.UserOauth, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserOauth), nil
	}
}

func (u userOauthDo) Take() (*entity.UserOauth, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserOauth), nil
	}
}

func (u userOauthDo) Last() (*entity.UserOauth, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserOauth), nil
	}
}

func (u userOauthDo) Find() ([]*entity.UserOauth, error) {
	result, err := u.DO.Find()
	return result.([]*entity.UserOauth), err
}

func (u userOauthDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserOauth, err error) {
	buf := make([]*entity.UserOauth, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userOauthDo) FindInBatches(result *[]*entity.UserOauth, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userOauthDo) Attrs(attrs ...field.AssignExpr) IUserOauthDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userOauthDo) Assign(attrs ...field.AssignExpr) IUserOauthDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userOauthDo) Joins(fields ...field.RelationField) IUserOauthDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userOauthDo) Preload(fields ...field.RelationField) IUserOauthDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userOauthDo) FirstOrInit() (*entity.UserOauth, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserOauth), nil
	}
}

func (u userOauthDo) FirstOrCreate() (*entity.UserOauth, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserOauth), nil
	}
}

func (u userOauthDo) FindByPage(offset int, limit int) (result []*entity.UserOauth, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userOauthDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userOauthDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userOauthDo) Delete(models ...*entity.UserOauth) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userOauthDo) withDO(do gen.Dao) *userOauthDo {
	u.DO = *do.(*gen.DO)
	return u
}
