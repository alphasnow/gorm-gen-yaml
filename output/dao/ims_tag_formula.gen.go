// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/we7coreteam/gorm-gen-yaml/output/entity"
)

func newTagFormula(db *gorm.DB, opts ...gen.DOOption) tagFormula {
	_tagFormula := tagFormula{}

	_tagFormula.tagFormulaDo.UseDB(db, opts...)
	_tagFormula.tagFormulaDo.UseModel(&entity.TagFormula{})

	tableName := _tagFormula.tagFormulaDo.TableName()
	_tagFormula.ALL = field.NewAsterisk(tableName)
	_tagFormula.ID = field.NewInt32(tableName, "id")
	_tagFormula.TagID = field.NewInt32(tableName, "tag_id")
	_tagFormula.FormulaID = field.NewInt32(tableName, "formula_id")

	_tagFormula.fillFieldMap()

	return _tagFormula
}

type tagFormula struct {
	tagFormulaDo

	ALL       field.Asterisk
	ID        field.Int32
	TagID     field.Int32
	FormulaID field.Int32

	fieldMap map[string]field.Expr
}

func (t tagFormula) Table(newTableName string) *tagFormula {
	t.tagFormulaDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tagFormula) As(alias string) *tagFormula {
	t.tagFormulaDo.DO = *(t.tagFormulaDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tagFormula) updateTableName(table string) *tagFormula {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.TagID = field.NewInt32(table, "tag_id")
	t.FormulaID = field.NewInt32(table, "formula_id")

	t.fillFieldMap()

	return t
}

func (t *tagFormula) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tagFormula) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.ID
	t.fieldMap["tag_id"] = t.TagID
	t.fieldMap["formula_id"] = t.FormulaID
}

func (t tagFormula) clone(db *gorm.DB) tagFormula {
	t.tagFormulaDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tagFormula) replaceDB(db *gorm.DB) tagFormula {
	t.tagFormulaDo.ReplaceDB(db)
	return t
}

type tagFormulaDo struct{ gen.DO }

type ITagFormulaDo interface {
	gen.SubQuery
	Debug() ITagFormulaDo
	WithContext(ctx context.Context) ITagFormulaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITagFormulaDo
	WriteDB() ITagFormulaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITagFormulaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITagFormulaDo
	Not(conds ...gen.Condition) ITagFormulaDo
	Or(conds ...gen.Condition) ITagFormulaDo
	Select(conds ...field.Expr) ITagFormulaDo
	Where(conds ...gen.Condition) ITagFormulaDo
	Order(conds ...field.Expr) ITagFormulaDo
	Distinct(cols ...field.Expr) ITagFormulaDo
	Omit(cols ...field.Expr) ITagFormulaDo
	Join(table schema.Tabler, on ...field.Expr) ITagFormulaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITagFormulaDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITagFormulaDo
	Group(cols ...field.Expr) ITagFormulaDo
	Having(conds ...gen.Condition) ITagFormulaDo
	Limit(limit int) ITagFormulaDo
	Offset(offset int) ITagFormulaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITagFormulaDo
	Unscoped() ITagFormulaDo
	Create(values ...*entity.TagFormula) error
	CreateInBatches(values []*entity.TagFormula, batchSize int) error
	Save(values ...*entity.TagFormula) error
	First() (*entity.TagFormula, error)
	Take() (*entity.TagFormula, error)
	Last() (*entity.TagFormula, error)
	Find() ([]*entity.TagFormula, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.TagFormula, err error)
	FindInBatches(result *[]*entity.TagFormula, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.TagFormula) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITagFormulaDo
	Assign(attrs ...field.AssignExpr) ITagFormulaDo
	Joins(fields ...field.RelationField) ITagFormulaDo
	Preload(fields ...field.RelationField) ITagFormulaDo
	FirstOrInit() (*entity.TagFormula, error)
	FirstOrCreate() (*entity.TagFormula, error)
	FindByPage(offset int, limit int) (result []*entity.TagFormula, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITagFormulaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tagFormulaDo) Debug() ITagFormulaDo {
	return t.withDO(t.DO.Debug())
}

func (t tagFormulaDo) WithContext(ctx context.Context) ITagFormulaDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tagFormulaDo) ReadDB() ITagFormulaDo {
	return t.Clauses(dbresolver.Read)
}

func (t tagFormulaDo) WriteDB() ITagFormulaDo {
	return t.Clauses(dbresolver.Write)
}

func (t tagFormulaDo) Session(config *gorm.Session) ITagFormulaDo {
	return t.withDO(t.DO.Session(config))
}

func (t tagFormulaDo) Clauses(conds ...clause.Expression) ITagFormulaDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tagFormulaDo) Returning(value interface{}, columns ...string) ITagFormulaDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tagFormulaDo) Not(conds ...gen.Condition) ITagFormulaDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tagFormulaDo) Or(conds ...gen.Condition) ITagFormulaDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tagFormulaDo) Select(conds ...field.Expr) ITagFormulaDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tagFormulaDo) Where(conds ...gen.Condition) ITagFormulaDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tagFormulaDo) Order(conds ...field.Expr) ITagFormulaDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tagFormulaDo) Distinct(cols ...field.Expr) ITagFormulaDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tagFormulaDo) Omit(cols ...field.Expr) ITagFormulaDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tagFormulaDo) Join(table schema.Tabler, on ...field.Expr) ITagFormulaDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tagFormulaDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITagFormulaDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tagFormulaDo) RightJoin(table schema.Tabler, on ...field.Expr) ITagFormulaDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tagFormulaDo) Group(cols ...field.Expr) ITagFormulaDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tagFormulaDo) Having(conds ...gen.Condition) ITagFormulaDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tagFormulaDo) Limit(limit int) ITagFormulaDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tagFormulaDo) Offset(offset int) ITagFormulaDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tagFormulaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITagFormulaDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tagFormulaDo) Unscoped() ITagFormulaDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tagFormulaDo) Create(values ...*entity.TagFormula) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tagFormulaDo) CreateInBatches(values []*entity.TagFormula, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tagFormulaDo) Save(values ...*entity.TagFormula) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tagFormulaDo) First() (*entity.TagFormula, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TagFormula), nil
	}
}

func (t tagFormulaDo) Take() (*entity.TagFormula, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TagFormula), nil
	}
}

func (t tagFormulaDo) Last() (*entity.TagFormula, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TagFormula), nil
	}
}

func (t tagFormulaDo) Find() ([]*entity.TagFormula, error) {
	result, err := t.DO.Find()
	return result.([]*entity.TagFormula), err
}

func (t tagFormulaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.TagFormula, err error) {
	buf := make([]*entity.TagFormula, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tagFormulaDo) FindInBatches(result *[]*entity.TagFormula, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tagFormulaDo) Attrs(attrs ...field.AssignExpr) ITagFormulaDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tagFormulaDo) Assign(attrs ...field.AssignExpr) ITagFormulaDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tagFormulaDo) Joins(fields ...field.RelationField) ITagFormulaDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tagFormulaDo) Preload(fields ...field.RelationField) ITagFormulaDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tagFormulaDo) FirstOrInit() (*entity.TagFormula, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TagFormula), nil
	}
}

func (t tagFormulaDo) FirstOrCreate() (*entity.TagFormula, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TagFormula), nil
	}
}

func (t tagFormulaDo) FindByPage(offset int, limit int) (result []*entity.TagFormula, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tagFormulaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tagFormulaDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tagFormulaDo) Delete(models ...*entity.TagFormula) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tagFormulaDo) withDO(do gen.Dao) *tagFormulaDo {
	t.DO = *do.(*gen.DO)
	return t
}
