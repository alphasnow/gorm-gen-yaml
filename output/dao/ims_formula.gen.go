// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/we7coreteam/gorm-gen-yaml/output/entity"
)

func newFormula(db *gorm.DB, opts ...gen.DOOption) formula {
	_formula := formula{}

	_formula.formulaDo.UseDB(db, opts...)
	_formula.formulaDo.UseModel(&entity.Formula{})

	tableName := _formula.formulaDo.TableName()
	_formula.ALL = field.NewAsterisk(tableName)
	_formula.ID = field.NewInt32(tableName, "id")
	_formula.Name = field.NewString(tableName, "name")
	_formula.Tag = formulaManyToManyTag{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Tag", "entity.Tag"),
	}

	_formula.fillFieldMap()

	return _formula
}

type formula struct {
	formulaDo

	ALL  field.Asterisk
	ID   field.Int32
	Name field.String
	Tag  formulaManyToManyTag

	fieldMap map[string]field.Expr
}

func (f formula) Table(newTableName string) *formula {
	f.formulaDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f formula) As(alias string) *formula {
	f.formulaDo.DO = *(f.formulaDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *formula) updateTableName(table string) *formula {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.Name = field.NewString(table, "name")

	f.fillFieldMap()

	return f
}

func (f *formula) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *formula) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 3)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name

}

func (f formula) clone(db *gorm.DB) formula {
	f.formulaDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f formula) replaceDB(db *gorm.DB) formula {
	f.formulaDo.ReplaceDB(db)
	return f
}

type formulaManyToManyTag struct {
	db *gorm.DB

	field.RelationField
}

func (a formulaManyToManyTag) Where(conds ...field.Expr) *formulaManyToManyTag {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a formulaManyToManyTag) WithContext(ctx context.Context) *formulaManyToManyTag {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a formulaManyToManyTag) Session(session *gorm.Session) *formulaManyToManyTag {
	a.db = a.db.Session(session)
	return &a
}

func (a formulaManyToManyTag) Model(m *entity.Formula) *formulaManyToManyTagTx {
	return &formulaManyToManyTagTx{a.db.Model(m).Association(a.Name())}
}

type formulaManyToManyTagTx struct{ tx *gorm.Association }

func (a formulaManyToManyTagTx) Find() (result []*entity.Tag, err error) {
	return result, a.tx.Find(&result)
}

func (a formulaManyToManyTagTx) Append(values ...*entity.Tag) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a formulaManyToManyTagTx) Replace(values ...*entity.Tag) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a formulaManyToManyTagTx) Delete(values ...*entity.Tag) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a formulaManyToManyTagTx) Clear() error {
	return a.tx.Clear()
}

func (a formulaManyToManyTagTx) Count() int64 {
	return a.tx.Count()
}

type formulaDo struct{ gen.DO }

type IFormulaDo interface {
	gen.SubQuery
	Debug() IFormulaDo
	WithContext(ctx context.Context) IFormulaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFormulaDo
	WriteDB() IFormulaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFormulaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFormulaDo
	Not(conds ...gen.Condition) IFormulaDo
	Or(conds ...gen.Condition) IFormulaDo
	Select(conds ...field.Expr) IFormulaDo
	Where(conds ...gen.Condition) IFormulaDo
	Order(conds ...field.Expr) IFormulaDo
	Distinct(cols ...field.Expr) IFormulaDo
	Omit(cols ...field.Expr) IFormulaDo
	Join(table schema.Tabler, on ...field.Expr) IFormulaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFormulaDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFormulaDo
	Group(cols ...field.Expr) IFormulaDo
	Having(conds ...gen.Condition) IFormulaDo
	Limit(limit int) IFormulaDo
	Offset(offset int) IFormulaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFormulaDo
	Unscoped() IFormulaDo
	Create(values ...*entity.Formula) error
	CreateInBatches(values []*entity.Formula, batchSize int) error
	Save(values ...*entity.Formula) error
	First() (*entity.Formula, error)
	Take() (*entity.Formula, error)
	Last() (*entity.Formula, error)
	Find() ([]*entity.Formula, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Formula, err error)
	FindInBatches(result *[]*entity.Formula, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.Formula) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFormulaDo
	Assign(attrs ...field.AssignExpr) IFormulaDo
	Joins(fields ...field.RelationField) IFormulaDo
	Preload(fields ...field.RelationField) IFormulaDo
	FirstOrInit() (*entity.Formula, error)
	FirstOrCreate() (*entity.Formula, error)
	FindByPage(offset int, limit int) (result []*entity.Formula, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFormulaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f formulaDo) Debug() IFormulaDo {
	return f.withDO(f.DO.Debug())
}

func (f formulaDo) WithContext(ctx context.Context) IFormulaDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f formulaDo) ReadDB() IFormulaDo {
	return f.Clauses(dbresolver.Read)
}

func (f formulaDo) WriteDB() IFormulaDo {
	return f.Clauses(dbresolver.Write)
}

func (f formulaDo) Session(config *gorm.Session) IFormulaDo {
	return f.withDO(f.DO.Session(config))
}

func (f formulaDo) Clauses(conds ...clause.Expression) IFormulaDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f formulaDo) Returning(value interface{}, columns ...string) IFormulaDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f formulaDo) Not(conds ...gen.Condition) IFormulaDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f formulaDo) Or(conds ...gen.Condition) IFormulaDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f formulaDo) Select(conds ...field.Expr) IFormulaDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f formulaDo) Where(conds ...gen.Condition) IFormulaDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f formulaDo) Order(conds ...field.Expr) IFormulaDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f formulaDo) Distinct(cols ...field.Expr) IFormulaDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f formulaDo) Omit(cols ...field.Expr) IFormulaDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f formulaDo) Join(table schema.Tabler, on ...field.Expr) IFormulaDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f formulaDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFormulaDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f formulaDo) RightJoin(table schema.Tabler, on ...field.Expr) IFormulaDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f formulaDo) Group(cols ...field.Expr) IFormulaDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f formulaDo) Having(conds ...gen.Condition) IFormulaDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f formulaDo) Limit(limit int) IFormulaDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f formulaDo) Offset(offset int) IFormulaDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f formulaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFormulaDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f formulaDo) Unscoped() IFormulaDo {
	return f.withDO(f.DO.Unscoped())
}

func (f formulaDo) Create(values ...*entity.Formula) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f formulaDo) CreateInBatches(values []*entity.Formula, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f formulaDo) Save(values ...*entity.Formula) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f formulaDo) First() (*entity.Formula, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Formula), nil
	}
}

func (f formulaDo) Take() (*entity.Formula, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Formula), nil
	}
}

func (f formulaDo) Last() (*entity.Formula, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Formula), nil
	}
}

func (f formulaDo) Find() ([]*entity.Formula, error) {
	result, err := f.DO.Find()
	return result.([]*entity.Formula), err
}

func (f formulaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Formula, err error) {
	buf := make([]*entity.Formula, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f formulaDo) FindInBatches(result *[]*entity.Formula, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f formulaDo) Attrs(attrs ...field.AssignExpr) IFormulaDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f formulaDo) Assign(attrs ...field.AssignExpr) IFormulaDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f formulaDo) Joins(fields ...field.RelationField) IFormulaDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f formulaDo) Preload(fields ...field.RelationField) IFormulaDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f formulaDo) FirstOrInit() (*entity.Formula, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Formula), nil
	}
}

func (f formulaDo) FirstOrCreate() (*entity.Formula, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Formula), nil
	}
}

func (f formulaDo) FindByPage(offset int, limit int) (result []*entity.Formula, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f formulaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f formulaDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f formulaDo) Delete(models ...*entity.Formula) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *formulaDo) withDO(do gen.Dao) *formulaDo {
	f.DO = *do.(*gen.DO)
	return f
}
